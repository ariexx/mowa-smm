// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: services.sql

package db

import (
	"context"
	"database/sql"
)

const deleteServiceByID = `-- name: DeleteServiceByID :exec
UPDATE services SET deleted_at = NOW() WHERE id = ?
`

func (q *Queries) DeleteServiceByID(ctx context.Context, id uint64) error {
	_, err := q.exec(ctx, q.deleteServiceByIDStmt, deleteServiceByID, id)
	return err
}

const getServiceByID = `-- name: GetServiceByID :one
SELECT id, name, min, max, price, margin, service_category_id, provider_id, status, is_refill, is_cancelable FROM services WHERE id = ?
`

type GetServiceByIDRow struct {
	ID                uint64       `json:"id"`
	Name              string       `json:"name"`
	Min               int32        `json:"min"`
	Max               int32        `json:"max"`
	Price             float64      `json:"price"`
	Margin            float64      `json:"margin"`
	ServiceCategoryID uint64       `json:"service_category_id"`
	ProviderID        uint64       `json:"provider_id"`
	Status            string       `json:"status"`
	IsRefill          sql.NullBool `json:"is_refill"`
	IsCancelable      sql.NullBool `json:"is_cancelable"`
}

func (q *Queries) GetServiceByID(ctx context.Context, id uint64) (GetServiceByIDRow, error) {
	row := q.queryRow(ctx, q.getServiceByIDStmt, getServiceByID, id)
	var i GetServiceByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Min,
		&i.Max,
		&i.Price,
		&i.Margin,
		&i.ServiceCategoryID,
		&i.ProviderID,
		&i.Status,
		&i.IsRefill,
		&i.IsCancelable,
	)
	return i, err
}

const getServices = `-- name: GetServices :many
SELECT id, name, min, max, price, margin, service_category_id, provider_id, status, is_refill, is_cancelable FROM services WHERE deleted_at IS NULL
`

type GetServicesRow struct {
	ID                uint64       `json:"id"`
	Name              string       `json:"name"`
	Min               int32        `json:"min"`
	Max               int32        `json:"max"`
	Price             float64      `json:"price"`
	Margin            float64      `json:"margin"`
	ServiceCategoryID uint64       `json:"service_category_id"`
	ProviderID        uint64       `json:"provider_id"`
	Status            string       `json:"status"`
	IsRefill          sql.NullBool `json:"is_refill"`
	IsCancelable      sql.NullBool `json:"is_cancelable"`
}

func (q *Queries) GetServices(ctx context.Context) ([]GetServicesRow, error) {
	rows, err := q.query(ctx, q.getServicesStmt, getServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetServicesRow
	for rows.Next() {
		var i GetServicesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Min,
			&i.Max,
			&i.Price,
			&i.Margin,
			&i.ServiceCategoryID,
			&i.ProviderID,
			&i.Status,
			&i.IsRefill,
			&i.IsCancelable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServicesByProviderID = `-- name: GetServicesByProviderID :many
SELECT id, name, min, max, price, margin, service_category_id, provider_id, status, is_refill, is_cancelable FROM services WHERE provider_id = ?
`

type GetServicesByProviderIDRow struct {
	ID                uint64       `json:"id"`
	Name              string       `json:"name"`
	Min               int32        `json:"min"`
	Max               int32        `json:"max"`
	Price             float64      `json:"price"`
	Margin            float64      `json:"margin"`
	ServiceCategoryID uint64       `json:"service_category_id"`
	ProviderID        uint64       `json:"provider_id"`
	Status            string       `json:"status"`
	IsRefill          sql.NullBool `json:"is_refill"`
	IsCancelable      sql.NullBool `json:"is_cancelable"`
}

func (q *Queries) GetServicesByProviderID(ctx context.Context, providerID uint64) ([]GetServicesByProviderIDRow, error) {
	rows, err := q.query(ctx, q.getServicesByProviderIDStmt, getServicesByProviderID, providerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetServicesByProviderIDRow
	for rows.Next() {
		var i GetServicesByProviderIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Min,
			&i.Max,
			&i.Price,
			&i.Margin,
			&i.ServiceCategoryID,
			&i.ProviderID,
			&i.Status,
			&i.IsRefill,
			&i.IsCancelable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBatchProviders = `-- name: InsertBatchProviders :exec
INSERT INTO services (name, min, max, price, margin, service_category_id, provider_id, status, is_refill, is_cancelable) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertBatchProvidersParams struct {
	Name              string       `json:"name"`
	Min               int32        `json:"min"`
	Max               int32        `json:"max"`
	Price             float64      `json:"price"`
	Margin            float64      `json:"margin"`
	ServiceCategoryID uint64       `json:"service_category_id"`
	ProviderID        uint64       `json:"provider_id"`
	Status            string       `json:"status"`
	IsRefill          sql.NullBool `json:"is_refill"`
	IsCancelable      sql.NullBool `json:"is_cancelable"`
}

func (q *Queries) InsertBatchProviders(ctx context.Context, arg InsertBatchProvidersParams) error {
	_, err := q.exec(ctx, q.insertBatchProvidersStmt, insertBatchProviders,
		arg.Name,
		arg.Min,
		arg.Max,
		arg.Price,
		arg.Margin,
		arg.ServiceCategoryID,
		arg.ProviderID,
		arg.Status,
		arg.IsRefill,
		arg.IsCancelable,
	)
	return err
}

const updateServiceByID = `-- name: UpdateServiceByID :exec
UPDATE services SET name = ?, min = ?, max = ?, price = ?, margin = ?, service_category_id = ?, provider_id = ?, status = ?, is_refill = ?, is_cancelable = ? WHERE id = ?
`

type UpdateServiceByIDParams struct {
	Name              string       `json:"name"`
	Min               int32        `json:"min"`
	Max               int32        `json:"max"`
	Price             float64      `json:"price"`
	Margin            float64      `json:"margin"`
	ServiceCategoryID uint64       `json:"service_category_id"`
	ProviderID        uint64       `json:"provider_id"`
	Status            string       `json:"status"`
	IsRefill          sql.NullBool `json:"is_refill"`
	IsCancelable      sql.NullBool `json:"is_cancelable"`
	ID                uint64       `json:"id"`
}

func (q *Queries) UpdateServiceByID(ctx context.Context, arg UpdateServiceByIDParams) error {
	_, err := q.exec(ctx, q.updateServiceByIDStmt, updateServiceByID,
		arg.Name,
		arg.Min,
		arg.Max,
		arg.Price,
		arg.Margin,
		arg.ServiceCategoryID,
		arg.ProviderID,
		arg.Status,
		arg.IsRefill,
		arg.IsCancelable,
		arg.ID,
	)
	return err
}
